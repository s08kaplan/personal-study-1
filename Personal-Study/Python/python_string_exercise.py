# -*- coding: utf-8 -*-
"""python_string_exercise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OfebA2U4KffPuYab-xjaNoKanMYYNWc4
"""

'''Exercise: Create a string made of
the first, middle and last character'''
a = "pencils"
print(a[::3])

#another solution
first = a[0]
middle= int(len(a)/2)
result= first + a[middle] + a[-1]
print(result)

'''Exercise: Create a string made of
the middle three characters'''
b = "Oklahoma"
middle = int(len(b)/2)
print(b[middle-1]+b[middle]+b[middle+1])

#another solution
print(b[middle-1:middle+2])

'''Exercise: Arrange string characters
such that lowercase letters should
come first'''

c = ("Ali","VeLi", "DeRYa")
lower = []
upper = []
for i in c:
   for j in i:
     if j.islower():
       lower.append(j)
     else:
       upper.append(j)
sorted_str = ' '.join(lower+upper)
print(sorted_str)

'''Exercise: Count all letters, digits,
and special symbols from a given
string'''
a = ("Ali27?!-alkan")
letters =[]
digits = []
symbols = []
for i in a:
    if i.isalpha():
       letters.append(i)
    elif i.isdigit():
       digits.append(i)
    else:
       symbols.append(i)
print(f" In your word there are {len(letters)} letters ,{len(digits)} digits and {len(symbols)} symbols")

#another solution
def find_digits_chars_symbols(sample_str):
    char_count = 0
    digit_count = 0
    symbol_count = 0
    for char in sample_str:
        if char.isalpha():
            char_count += 1
        elif char.isdigit():
            digit_count += 1
        # if it is not letter or digit then it is special symbol
        else:
            symbol_count += 1

    print("Chars =", char_count, "Digits =", digit_count, "Symbol =", symbol_count)

sample_str = "P@yn2at&#i5ve"
print("total counts of chars, Digits, and symbols \n")
find_digits_chars_symbols(sample_str)

'''Exercise:Create a mixed String using
 the following rules
Given two strings, s1 and s2. Write a
program to create a new string s3 made
of the first char of s1, then the last
char of s2, Next, the second char of
s1 and second last char of s2, and
so on. Any leftover chars go at the
end of the result.'''

a = "Abraham"
b = "Lincoln"
count = 0
c = ""

for i in range(len(a)):
    c += a[i]
    if count < len(b):
        c += b[len(b) - 1 - count]
        count += 1

c += b[count:]

print(c)

#another solution
s1 = "Abc"
s2 = "Xyz"

# get string length
s1_length = len(s1)
s2_length = len(s2)

# get length of a bigger string
length = s1_length if s1_length > s2_length else s2_length
result = ""

# reverse s2
s2 = s2[::-1]

# iterate string
# s1 ascending and s2 descending
for i in range(length):
    if i < s1_length:
        result = result + s1[i]
    if i < s2_length:
        result = result + s2[i]

print(result)

'''Exercise: String characters balance Test
Write a program to check if two strings
are balanced. For example, strings s1
and s2 are balanced if all the
characters in the s1 are present in
s2. The character’s position doesn’t
matter.'''

def string_balance_test(s1, s2):
    flag = True
    for char in s1:
        if char in s2:
            continue
        else:
            flag = False
    return flag


s1 = "Yn"
s2 = "PYnative"
flag = string_balance_test(s1, s2)
print("s1 and s2 are balanced:", flag)

s1 = "Ynf"
s2 = "PYnative"
flag = string_balance_test(s1, s2)
print("s1 and s2 are balanced:", flag)

def check(str_1,str_2):
  alert = True
  for char in str_1:
    if char in str_2:
      continue
    else:
      alert = False
  return alert
a = "always"
b = "away"
print(check(a,b))

#another solution
def check(str_1, str_2):
    for char in str_1:
        if char not in str_2:
            return False
    return True

a = "always"
b = "away"
print(check(a, b))

#another one
def check(str_1, str_2):
    char_set_2 = set(str_2)
    for char in str_1:
        if char not in char_set_2:
            return False
    return True

a = "always"
b = "away"
print(check(a, b))

def are_strings_balanced(s1, s2):
    char_set_2 = set(s2)

    for char in s1:
        if char not in char_set_2:
            return False

    return True

s1 = input("Enter the first string: ")
s2 = input("Enter the second string: ")

if are_strings_balanced(s1, s2):
    print("The strings are balanced.")
else:
    print("The strings are not balanced.")

#Exercise 8: Find all occurrences of a substring in a given string by ignoring the case
a = "How are You Today? are you ok?"
a = a.lower()
count_you = a.count("you")
print(count_you)

#Exercise 9: Calculate the sum and average of the digits present in a string

input_str = "PYnative29@#8496"
total = 0
cnt = 0
for char in input_str:
    if char.isdigit():
        total += int(char)
        cnt += 1

# average = sum / count of digits
avg = total / cnt
print("Sum is:", total, "Average is ", avg)

def hypo(a, b):
  return (a**2 + b**2)**.5

print(hypo(3, 4))

def calculator(a, b, operation):
    if operation == "+":
       return a + b
    elif operation == "-":
       return a - b
    elif operation == "*":
       return a * b
    elif operation == "/":
       return a/b

print(calculator(3,4,"+"))
print(calculator(3,4,"*"))

