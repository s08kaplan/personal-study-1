# -*- coding: utf-8 -*-
"""Mixed_Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VAk4W4CSLvKiE6DTcBulKJUtci1MEqWW
"""

def checker(item):
    user_str = item.split()
    largest_str = ""
    for i in user_str:
        if isinstance(i, str) and len(i) > len(largest_str):
            largest_str = i
    return largest_str

user = input("Please enter some strings and numbers separated by spaces: ")
print(checker(user))

'''Exercise :Calculate the sum of all
numbers from 1 to a given number'''
user= int(input("Please enter a number : "))
result = 0
for i in range(1,user+1):
    result +=i
print(result)

def add_numbers(n):
   result = 0
   for i in range(n+1):
       result +=i
   return result
print(add_numbers(5))

'''Exercise: Write a program to print
multiplication table of a given number'''

def required_product(n):
    a =1
    product =[]
    for i in range(1,n+1):
         result = f"{n} * {i} : {n*i}"
         product.append(result)
         a+=1
user  =int(input())
print(required_product(user))

#chatgpt solution
def required_product(n):
    product = []
    for i in range(1, 11):  # Multiplication table is typically up to 10
        result = f"{n} * {i} : {n * i}"
        product.append(result)
    return product

user = int(input("Enter a number: "))
result_list = required_product(user)
for item in result_list:
    print(item)

def required_product(n):
    multiplication_table = {}
    for i in range(1, 11):  # Multiplication table is typically up to 10
        multiplication_table[i] = n * i
    return multiplication_table

user = int(input("Enter a number: "))
result_dict = required_product(user)
for key, value in result_dict.items():
    print(f"{user} * {key} : {value}")

'''Exercise: Count the total number of
digits in a number'''

user = input()
user = user.strip(",.-_")
user = str(user)
result= len(user)
print(result)

user = input()
digit_count = 0

for char in user:
    if char.isdigit():
        digit_count += 1

print(digit_count)

'''Exercise: Display numbers from -10
to -1 using for loop'''

for i in range (-10,0):
    print(i,end="")

'''Exercise: Print list in reverse
order using a loop'''

a = [111,22,44,15,26,17,18]
b =[]
count = 0
for i in range(len(a)-1):
    if i<=len(a):
        a[count] = a[(len(a)-1)-count]
        result = a[count]
        b.append(result)
        count +=1
    else:
        break
print(b)

#chatgpt solution
a = [111, 22, 44, 15, 26, 17, 18]
b = []

for i in range(len(a)):
    count = len(a) - 1 - i
    b.append(a[count])

print(b)

'''Exercise:Write a program to display
all prime numbers within a range'''
def prime_num(number):
    if number%2 or number%3 or number%5 or number % 11 is True:
       print("number is not a prime number")
    else:
       print("number is a prime number")
user = int(input("enter a number : "))
print(prime_num(user))

#chatgpt solution
def is_prime(number):
    if number <= 1:
        return False
    if number <= 3:
        return True
    if number % 2 == 0 or number % 3 == 0:
        return False
    i = 5
    while i * i <= number:
        if number % i == 0 or number % (i + 2) == 0:
            return False
        i += 6
    return True

user = int(input("Enter a number: "))
if is_prime(user):
    print("Number is a prime number")
else:
    print("Number is not a prime number")

start = 25
end = 50
print("Prime numbers between", start, "and", end, "are:")

for num in range(start, end + 1):
    # all prime numbers are greater than 1
    # if number is less than or equal to 1, it is not prime
    if num > 1:
        for i in range(2, num):
            # check for factors
            if (num % i) == 0:
                # not a prime number so break inner loop and
                # look for next number
                break
        else:
            print(num)

'''Exercise: Reverse a given integer number'''
user =input()
user = user[::-1]
print(user)

print("Number Pattern ")

# Decide the row count. (above pattern contains 5 rows)
row = 5
# start: 1
# stop: row+1 (range never include stop number in result)
# step: 1
# run loop 5 times
for i in range(1, row + 1, 1):
    # Run inner loop i+1 times
    for j in range(1, i + 1):
        print(j, end=' ')
    # empty line after each row
    print("")

'''Exercise: Print the following pattern'''
n = int(input())
for i in range(1,n+1):
    for j in range(1,i+1):
        print(j,end=" ")
    print("")

'''Exercise: Use a loop to display
elements from a given list present at
odd index positions'''

n= [1,3,14,3,16,17,29]
# stat from index 1 with step 2( means 1, 3, 5, an so on)
for i in n[1::2]:
    print(i, end=" ")

#another solution
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
for i in range(1, len(my_list), 2):
    print(my_list[i])